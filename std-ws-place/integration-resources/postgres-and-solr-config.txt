Install and Configure PostgreSQL and SOLR for integration Testing.
------------------------------------------------------------------

For 'Integration' tests to be successful and repeatable, it is recommended that
the tests start from a "known" state.  There are two data stores in Place 2.0, a
master database and a corresponding solr repository.  It's important that they
are in sync.

This document covers a variety of topics:
   -- initial install of the PostgreSQL database
   -- one-time configuration of PostgreSQL database
   -- initial install of the SOLR software
   -- one-time configuration of the SOLR software
   -- install the "place-data-load" application (sub-project in "std-lib-place")
   -- re-populating the "PostgreSQL" database and SOLR repository

The first four of these tasks may or may not be able to be fully scripted.  If a
dedicated server can be built once, a manual set-up process won't be too onerous.
However if those steps need to be scripted in an automatic matter, the difficulty
increases significantly.

All six steps will be covered in the order given.  Scripts will be provided for
the final step.



I.  Install the PostgreSQL database.
------------------------------------

The instructions will be given in terms of an Ubuntu system, though they should
work equally well on any Linux-ish such as Debian.  It is assumed that the user
doing the install has "sudo" privileges.

Execute the following from the command line:
  $ sudo apt-get update
  $ sudo apt-get install postgresql
  $ sudo apt-get install postgresql-contrib

Once this is done the PostgreSQL database will be installed and running.



II.  Configure the PostgreSQL database.
---------------------------------------

Execute the following from the command line.  The "psql" tool uses a single "#"
as the command prompt.
  $ sudo -u postgres psql postgres
     # create database p124;
	 # \connect p124
	 # create schema sams_place;
	 # create user sams_place with password 'sams_place';
	 # grant all privileges on database p124 to sams_place;
	 # \q

If the database needs to be accessed from different server then two additional
edits will need to happen.
  $ cd /etc/postgresql/9.1/main
  $ sudo vi postgresql.conf
     [Find the line that has "listen_addresses = '...'" and change to]:
	   listen_addresses = '"'    # [leave comment alone]
  $ sudo vi pg_hba.conf
     [Add a line, the number of spaces between the columns doesn't matter]:
	   host   all   all   0.0.0.0/0    md5]
  $ cd /etc/init.d
  $ sudo ./postgresql stop
  $ sudo ./postgresql start

It is recommended that you use these database, schema, username and password
values.  If you change them, then adjust other files as necessary.  For example,
in the database connection properties file [as shown in the next step] make
sure that you use the correct host, port, database, username and password.

Create a properties file to define database connection parameters. Do the
following:
  $ cd
  $ mkdir .place [if it doesn't already exist]
  $ cd .place
  $ vi db.properties
     use.sas=false
	 pool.type=c3p0
	 
	 jdbc.url=jdbc:postgresql://localhost:5432/p124
	 jdbc.host=
	 jdbc.database=
	 jdbc.port=
	 jdbc.username=sams_place
	 jdbc.password=sams_place
	 
	 c3p0.testConnectionOnCheckout=true
	 c3p0.preferredTestQuery=SELECT1





III.  Install SOLR
------------------

Download an empty SOLR repository from Nexus:
  -- groupId=org.familysearch.standards.data
  -- artifiactId=solr-places
  -- version=4.7.1 [current as of this writing, but get the latest version]

If the "unzip" package isn't installed, do so by executing:
  $ sudo apt-get install unzip

This can be installed anywhere, but the "default" location is to use ".place" in
the user home directory.  Assuming a clean system, do the following.  Note, use
the correct file name for the solr-places-xxx.zip file.
  $ cd
  $ mkdir .place
  $ cd .place
  $ cp [location-of-zip-file]/solr-places-4.7.1.zip .
  $ unzip solr-places-4.7.1.zip

If you install SOLR to some place other than the default location, a property
needs to be set to instruct the system where to find the files.  Do the
following:
  $ cd
  $ mkdir .place [if it doesn't already exist]
  $ cd .place
  $ vi solr.properties
    [read.location=<path to where solr-places directory exists>]
	[read.location=http://localhost:8983/solr/places
	 write.location=http://localhost:8983/solr/places]

My recommendation would be to create this file regardless of where SOLR has been
installed, and to use the second set of data, where both the "read" and write"
locations reference the HTTP protocol.



IV.  Configure SOLR
-------------------

The key item here is to make sure that this is a stand-alone SOLR repository, not
tied to a master index or repeater.  Do the following.  Note, it's assumed that
solr was installed in the "default" location.  If not, "cd" to the install
directory.
  $ cd
  $ cd .place
  $ cd solr-places/solr/places/conf
  $ sudo vi solrconfig.xml
    [Make sure that the "master" and "slave" definitions in the "ReplicationHander"
	 are commented out.  This is found at about line 1200 in the file.]



V.  Install the place-data-load Application
-------------------------------------------

If the "std-lib-place" project has been downloaded, then the requisite files
are present on the server.  If not, then download either the full project, or
just the db/solr load project.
  $ cd [to where the files are to reside]
  $ svn co https://vcs.fsglobal.net/svn/standards/std2/std-lib-place/trunk
  $ svn co https://vcs.fsglobal.net/svn/standards/std2/std-lib-place/trunk/place-data-load

Use the first "svn co ..." command if you want to entire package.  Use the second
"svn co ..." if you only want to bring down the data load module.

In order to run the "... load ..." application, all dependent JAR files must be
brought locally.  Decide where those files should reside, and create the necessary
directories.

Assuming that "maven" is installed on the server, you can bring down all of the
dependencies, as such:
  $ cd [to where the project files reside]
  $ cd std-lib-place/trunk/place-data-load
  $ mvn clean install
  $ mvn -DoutputDirectory=/home/ubuntu/... dependency:copy-dependencies
  $ cp target/std-lib-place-data-load-XXXX-SNAPSHOT.jar /home/ubuntu/...

The path specified by "-DoutputDirectory=..." must already exist.  This is where
all of the "JAR" files will end up.  Since the "copy-dependencies" won't copy
the "JAR" file for the place-data-load, the "cp ..." command will ensure that
that "JAR" file is copied to where all the others reside.

Often the permissions on the JAR files are such that they can't be used.  So
do the following:
  $ cd /home/ubuntu/... [where JAR files were copied to]
  $ chmod 644 *.jar

From time to time, as the "load" application changes, you can do a "svn up" to
get new code, a "mvn clean install" to install it, and then re-copy the dependent
"JAR" files, after cleaning up the directory where the "JAR" files reside.  This
will ensure that the latest code is on the server.



VI.  Repopulate the DB and SOLR data
------------------------------------

The "std-ws-place" project has a folder named "integration-resources"; in this
are several files that are used to re-populate the database and SOLR.  These
files are:
  -- postgres-and-solr-config.txt:  this file
  -- std-place-api-postgres-drop-db.sql:  SQL to clean out a database
  -- std-place-api-postgres.sql:  SQL to create the schema artifacts
  -- load-base-values.sql:  SQL to populate the database tables
  -- run-load-db.sh:  script to clean and populate the database
  -- run-load-solr.sh:  script to clean and populate SOLR

Make sure that the two ".sh" files are executable.  The "run-load-db.sh" script
assumes that the ".sql" files are in the same directory as the script.

The "run-load-solr.sh" script needs to be updated in three places:
  -- solrhome=... [this should be the parent directory of "solr-places"]
  -- flatfile=... [this should be a directory where files can be stored]
  -- for ff in ...*.jar  [this should be where the JAR files are]

To populate the database and SOLR, run:
  $ ./run-load-db.sh
  $ ./run-load-solr.sh

The former will create a "db-log.txt" file with any messages.  The latter will
send all output to the terminal, but the data is fairly small.

Congratulations ... you should have a clean DB and SOLR repository.  Both of
the scripts should run in just a few seconds.
  
