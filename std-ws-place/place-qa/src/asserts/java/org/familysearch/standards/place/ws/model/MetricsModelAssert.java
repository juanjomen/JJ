package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link MetricsModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MetricsModelAssert extends AbstractAssert<MetricsModelAssert, MetricsModel> {

  /**
   * Creates a new </code>{@link MetricsModelAssert}</code> to make assertions on actual MetricsModel.
   * @param actual the MetricsModel we want to make assertions on.
   */
  public MetricsModelAssert(MetricsModel actual) {
    super(actual, MetricsModelAssert.class);
  }

  /**
   * An entry point for MetricsModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myMetricsModel)</code> and get specific assertion with code completion.
   * @param actual the MetricsModel we want to make assertions on.
   * @return a new </code>{@link MetricsModelAssert}</code>
   */
  public static MetricsModelAssert assertThat(MetricsModel actual) {
    return new MetricsModelAssert(actual);
  }

  /**
   * Verifies that the actual MetricsModel's counts is equal to the given one.
   * @param counts the given counts to compare the actual MetricsModel's counts to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MetricsModel's counts is not equal to the given one.
   */
  public MetricsModelAssert hasCounts(CountsModel counts) {
    // check that actual MetricsModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected counts of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    CountsModel actualCounts = actual.getCounts();
    if (!org.assertj.core.util.Objects.areEqual(actualCounts, counts)) {
      failWithMessage(assertjErrorMessage, actual, counts, actualCounts);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MetricsModel's scorers is equal to the given one.
   * @param scorers the given scorers to compare the actual MetricsModel's scorers to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MetricsModel's scorers is not equal to the given one.
   */
  public MetricsModelAssert hasScorers(ScorersModel scorers) {
    // check that actual MetricsModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected scorers of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ScorersModel actualScorers = actual.getScorers();
    if (!org.assertj.core.util.Objects.areEqual(actualScorers, scorers)) {
      failWithMessage(assertjErrorMessage, actual, scorers, actualScorers);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MetricsModel's timings is equal to the given one.
   * @param timings the given timings to compare the actual MetricsModel's timings to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MetricsModel's timings is not equal to the given one.
   */
  public MetricsModelAssert hasTimings(TimingsModel timings) {
    // check that actual MetricsModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected timings of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TimingsModel actualTimings = actual.getTimings();
    if (!org.assertj.core.util.Objects.areEqual(actualTimings, timings)) {
      failWithMessage(assertjErrorMessage, actual, timings, actualTimings);
    }

    // return the current assertion for method chaining
    return this;
  }

}
