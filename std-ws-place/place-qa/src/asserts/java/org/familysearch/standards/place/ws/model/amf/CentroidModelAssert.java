package org.familysearch.standards.place.ws.model.amf;

import org.assertj.core.api.AbstractAssert;
import org.familysearch.standards.place.ws.model.CentroidModel;

// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link CentroidModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CentroidModelAssert extends AbstractAssert<CentroidModelAssert, CentroidModel> {

  /**
   * Creates a new </code>{@link CentroidModelAssert}</code> to make assertions on actual CentroidModel.
   * @param actual the CentroidModel we want to make assertions on.
   */
  public CentroidModelAssert(CentroidModel actual) {
    super(actual, CentroidModelAssert.class);
  }

  /**
   * An entry point for CentroidModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myCentroidModel)</code> and get specific assertion with code completion.
   * @param actual the CentroidModel we want to make assertions on.
   * @return a new </code>{@link CentroidModelAssert}</code>
   */
  public static CentroidModelAssert assertThat(CentroidModel actual) {
    return new CentroidModelAssert(actual);
  }

  /**
   * Verifies that the actual CentroidModel's latitude is equal to the given one.
   * @param latitude the given latitude to compare the actual CentroidModel's latitude to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CentroidModel's latitude is not equal to the given one.
   */
  public CentroidModelAssert hasLatitude(Double latitude) {
    // check that actual CentroidModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected latitude of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualLatitude = actual.getLatitude();
    if (!org.assertj.core.util.Objects.areEqual(actualLatitude, latitude)) {
      failWithMessage(assertjErrorMessage, actual, latitude, actualLatitude);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CentroidModel's longitude is equal to the given one.
   * @param longitude the given longitude to compare the actual CentroidModel's longitude to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CentroidModel's longitude is not equal to the given one.
   */
  public CentroidModelAssert hasLongitude(Double longitude) {
    // check that actual CentroidModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected longitude of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualLongitude = actual.getLongitude();
    if (!org.assertj.core.util.Objects.areEqual(actualLongitude, longitude)) {
      failWithMessage(assertjErrorMessage, actual, longitude, actualLongitude);
    }

    // return the current assertion for method chaining
    return this;
  }

}
