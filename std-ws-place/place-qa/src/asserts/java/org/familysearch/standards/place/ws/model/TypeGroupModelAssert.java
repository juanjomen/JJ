package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link PlaceTypeGroupModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TypeGroupModelAssert extends AbstractAssert<TypeGroupModelAssert, PlaceTypeGroupModel> {

  /**
   * Creates a new </code>{@link TypeGroupModelAssert}</code> to make assertions on actual TypeGroupModel.
   * @param actual the TypeGroupModel we want to make assertions on.
   */
  public TypeGroupModelAssert(PlaceTypeGroupModel actual) {
    super(actual, TypeGroupModelAssert.class);
  }

  /**
   * An entry point for TypeGroupModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myTypeGroupModel)</code> and get specific assertion with code completion.
   * @param actual the TypeGroupModel we want to make assertions on.
   * @return a new </code>{@link TypeGroupModelAssert}</code>
   */
  public static TypeGroupModelAssert assertThat(PlaceTypeGroupModel actual) {
    return new TypeGroupModelAssert(actual);
  }

  /**
   * Verifies that the actual TypeGroupModel's description is equal to the given one.
   * @param description the given description to compare the actual TypeGroupModel's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TypeGroupModel's description is not equal to the given one.
   */
  public TypeGroupModelAssert hasDescription(String description) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getLocalizedName().get(0).getDescription();
    if (!org.assertj.core.util.Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel's id is equal to the given one.
   * @param id the given id to compare the actual TypeGroupModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TypeGroupModel's id is not equal to the given one.
   */
  public TypeGroupModelAssert hasId(int id) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel's name is equal to the given one.
   * @param name the given name to compare the actual TypeGroupModel's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TypeGroupModel's name is not equal to the given one.
   */
  public TypeGroupModelAssert hasName(String name) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getLocalizedName().get(0).getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel's selfLink is equal to the given one.
   * @param selfLink the given selfLink to compare the actual TypeGroupModel's selfLink to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TypeGroupModel's selfLink is not equal to the given one.
   */
  public TypeGroupModelAssert hasSelfLink(LinkModel selfLink) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected selfLink of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LinkModel actualSelfLink = actual.getSelfLink();
    if (!org.assertj.core.util.Objects.areEqual(actualSelfLink, selfLink)) {
      failWithMessage(assertjErrorMessage, actual, selfLink, actualSelfLink);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel's subGroups contains the given TypeGroupModel elements.
   * @param subGroups the given elements that should be contained in actual TypeGroupModel's subGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual TypeGroupModel's subGroups does not contain all given TypeGroupModel elements.
   */
  public TypeGroupModelAssert hasSubGroups(PlaceTypeGroupModel... subGroups) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeGroupModel varargs is not null.
    if (subGroups == null) throw new AssertionError("Expecting subGroups parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getSubGroups()).contains(subGroups);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getSubGroups().contains(subGroups)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getSubGroups()).overridingErrorMessage("\nmy error message %s", "arg1").contains(subGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel has no subGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual TypeGroupModel's subGroups is not empty.
   */
  public TypeGroupModelAssert hasNoSubGroups() {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have subGroups but had :\n  <%s>";
    
    // check
    if (!actual.getSubGroups().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSubGroups());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual TypeGroupModel's types contains the given TypeModel elements.
   * @param types the given elements that should be contained in actual TypeGroupModel's types.
   * @return this assertion object.
   * @throws AssertionError if the actual TypeGroupModel's types does not contain all given TypeModel elements.
   */
  public TypeGroupModelAssert hasTypes(TypeModel... types) {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeModel varargs is not null.
    if (types == null) throw new AssertionError("Expecting types parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTypes()).contains(types);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getTypes().contains(types)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(types);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TypeGroupModel has no types.
   * @return this assertion object.
   * @throws AssertionError if the actual TypeGroupModel's types is not empty.
   */
  public TypeGroupModelAssert hasNoTypes() {
    // check that actual TypeGroupModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have types but had :\n  <%s>";
    
    // check
    if (!actual.getTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
