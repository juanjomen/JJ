package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link LinkModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class LinkModelAssert extends AbstractAssert<LinkModelAssert, LinkModel> {

  /**
   * Creates a new </code>{@link LinkModelAssert}</code> to make assertions on actual LinkModel.
   * @param actual the LinkModel we want to make assertions on.
   */
  public LinkModelAssert(LinkModel actual) {
    super(actual, LinkModelAssert.class);
  }

  /**
   * An entry point for LinkModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myLinkModel)</code> and get specific assertion with code completion.
   * @param actual the LinkModel we want to make assertions on.
   * @return a new </code>{@link LinkModelAssert}</code>
   */
  public static LinkModelAssert assertThat(LinkModel actual) {
    return new LinkModelAssert(actual);
  }

  /**
   * Verifies that the actual LinkModel's href is equal to the given one.
   * @param href the given href to compare the actual LinkModel's href to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's href is not equal to the given one.
   */
  public LinkModelAssert hasHref(String href) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected href of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualHref = actual.getHref();
    if (!org.assertj.core.util.Objects.areEqual(actualHref, href)) {
      failWithMessage(assertjErrorMessage, actual, href, actualHref);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LinkModel's hrefLang is equal to the given one.
   * @param hrefLang the given hrefLang to compare the actual LinkModel's hrefLang to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's hrefLang is not equal to the given one.
   */
  public LinkModelAssert hasHrefLang(String hrefLang) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected hrefLang of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualHrefLang = actual.getHrefLang();
    if (!org.assertj.core.util.Objects.areEqual(actualHrefLang, hrefLang)) {
      failWithMessage(assertjErrorMessage, actual, hrefLang, actualHrefLang);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LinkModel's length is equal to the given one.
   * @param length the given length to compare the actual LinkModel's length to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's length is not equal to the given one.
   */
  public LinkModelAssert hasLength(String length) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected length of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLength = actual.getLength();
    if (!org.assertj.core.util.Objects.areEqual(actualLength, length)) {
      failWithMessage(assertjErrorMessage, actual, length, actualLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LinkModel's rel is equal to the given one.
   * @param rel the given rel to compare the actual LinkModel's rel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's rel is not equal to the given one.
   */
  public LinkModelAssert hasRel(String rel) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected rel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRel = actual.getRel();
    if (!org.assertj.core.util.Objects.areEqual(actualRel, rel)) {
      failWithMessage(assertjErrorMessage, actual, rel, actualRel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LinkModel's title is equal to the given one.
   * @param title the given title to compare the actual LinkModel's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's title is not equal to the given one.
   */
  public LinkModelAssert hasTitle(String title) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!org.assertj.core.util.Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LinkModel's type is equal to the given one.
   * @param type the given type to compare the actual LinkModel's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LinkModel's type is not equal to the given one.
   */
  public LinkModelAssert hasType(String type) {
    // check that actual LinkModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
