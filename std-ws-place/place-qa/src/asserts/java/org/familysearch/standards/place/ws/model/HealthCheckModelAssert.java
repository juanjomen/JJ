package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link HealthCheckModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HealthCheckModelAssert extends AbstractAssert<HealthCheckModelAssert, HealthCheckModel> {

  /**
   * Creates a new </code>{@link HealthCheckModelAssert}</code> to make assertions on actual HealthCheckModel.
   * @param actual the HealthCheckModel we want to make assertions on.
   */
  public HealthCheckModelAssert(HealthCheckModel actual) {
    super(actual, HealthCheckModelAssert.class);
  }

  /**
   * An entry point for HealthCheckModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myHealthCheckModel)</code> and get specific assertion with code completion.
   * @param actual the HealthCheckModel we want to make assertions on.
   * @return a new </code>{@link HealthCheckModelAssert}</code>
   */
  public static HealthCheckModelAssert assertThat(HealthCheckModel actual) {
    return new HealthCheckModelAssert(actual);
  }

  /**
   * Verifies that the actual HealthCheckModel's aPIVersion is equal to the given one.
   * @param aPIVersion the given aPIVersion to compare the actual HealthCheckModel's aPIVersion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HealthCheckModel's aPIVersion is not equal to the given one.
   */
  public HealthCheckModelAssert hasAPIVersion(String aPIVersion) {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected aPIVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAPIVersion = actual.getAPIVersion();
    if (!org.assertj.core.util.Objects.areEqual(actualAPIVersion, aPIVersion)) {
      failWithMessage(assertjErrorMessage, actual, aPIVersion, actualAPIVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HealthCheckModel's currentRevision is equal to the given one.
   * @param currentRevision the given currentRevision to compare the actual HealthCheckModel's currentRevision to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HealthCheckModel's currentRevision is not equal to the given one.
   */
  public HealthCheckModelAssert hasCurrentRevision(Integer currentRevision) {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected currentRevision of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualCurrentRevision = actual.getCurrentRevision();
    if (!org.assertj.core.util.Objects.areEqual(actualCurrentRevision, currentRevision)) {
      failWithMessage(assertjErrorMessage, actual, currentRevision, actualCurrentRevision);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HealthCheckModel's links contains the given LinkModel elements.
   * @param links the given elements that should be contained in actual HealthCheckModel's links.
   * @return this assertion object.
   * @throws AssertionError if the actual HealthCheckModel's links does not contain all given LinkModel elements.
   */
  public HealthCheckModelAssert hasLinks(LinkModel... links) {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // check that given LinkModel varargs is not null.
    if (links == null) throw new AssertionError("Expecting links parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getLinks()).contains(links);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getLinks().contains(links)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getLinks()).overridingErrorMessage("\nmy error message %s", "arg1").contains(links);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HealthCheckModel has no links.
   * @return this assertion object.
   * @throws AssertionError if the actual HealthCheckModel's links is not empty.
   */
  public HealthCheckModelAssert hasNoLinks() {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have links but had :\n  <%s>";
    
    // check
    if (!actual.getLinks().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLinks());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual HealthCheckModel's status is equal to the given one.
   * @param status the given status to compare the actual HealthCheckModel's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HealthCheckModel's status is not equal to the given one.
   */
  public HealthCheckModelAssert hasStatus(String status) {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStatus = actual.getStatus();
    if (!org.assertj.core.util.Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HealthCheckModel's wSVersion is equal to the given one.
   * @param wSVersion the given wSVersion to compare the actual HealthCheckModel's wSVersion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HealthCheckModel's wSVersion is not equal to the given one.
   */
  public HealthCheckModelAssert hasWSVersion(String wSVersion) {
    // check that actual HealthCheckModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected wSVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualWSVersion = actual.getWSVersion();
    if (!org.assertj.core.util.Objects.areEqual(actualWSVersion, wSVersion)) {
      failWithMessage(assertjErrorMessage, actual, wSVersion, actualWSVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
