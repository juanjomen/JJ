package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link PlaceRepresentationModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlaceRepresentationModelAssert extends AbstractAssert<PlaceRepresentationModelAssert, PlaceRepresentationModel> {

  /**
   * Creates a new </code>{@link PlaceRepresentationModelAssert}</code> to make assertions on actual PlaceRepresentationModel.
   * @param actual the PlaceRepresentationModel we want to make assertions on.
   */
  public PlaceRepresentationModelAssert(PlaceRepresentationModel actual) {
    super(actual, PlaceRepresentationModelAssert.class);
  }

  /**
   * An entry point for PlaceRepresentationModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlaceRepresentationModel)</code> and get specific assertion with code completion.
   * @param actual the PlaceRepresentationModel we want to make assertions on.
   * @return a new </code>{@link PlaceRepresentationModelAssert}</code>
   */
  public static PlaceRepresentationModelAssert assertThat(PlaceRepresentationModel actual) {
    return new PlaceRepresentationModelAssert(actual);
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's children contains the given PlaceRepresentationModel elements.
   * @param children the given elements that should be contained in actual PlaceRepresentationModel's children.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's children does not contain all given PlaceRepresentationModel elements.
   */
  public PlaceRepresentationModelAssert hasChildren(PlaceRepresentationModel... children) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check that given PlaceRepresentationModel varargs is not null.
    if (children == null) throw new AssertionError("Expecting children parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getChildren()).contains(children);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getChildren().contains(children)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getChildren()).overridingErrorMessage("\nmy error message %s", "arg1").contains(children);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel has no children.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's children is not empty.
   */
  public PlaceRepresentationModelAssert hasNoChildren() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have children but had :\n  <%s>";
    
    // check
    if (!actual.getChildren().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getChildren());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual PlaceRepresentationModel's displayName is equal to the given one.
   * @param displayName the given displayName to compare the actual PlaceRepresentationModel's displayName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's displayName is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasDisplayName(NameModel displayName) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected displayName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    NameModel actualDisplayName = actual.getDisplayName();
    if (!org.assertj.core.util.Objects.areEqual(actualDisplayName, displayName)) {
      failWithMessage(assertjErrorMessage, actual, displayName, actualDisplayName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's displayNames contains the given NameModel elements.
   * @param displayNames the given elements that should be contained in actual PlaceRepresentationModel's displayNames.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's displayNames does not contain all given NameModel elements.
   */
  public PlaceRepresentationModelAssert hasDisplayNames(NameModel... displayNames) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check that given NameModel varargs is not null.
    if (displayNames == null) throw new AssertionError("Expecting displayNames parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getDisplayNames()).contains(displayNames);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getDisplayNames().contains(displayNames)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getDisplayNames()).overridingErrorMessage("\nmy error message %s", "arg1").contains(displayNames);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel has no displayNames.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's displayNames is not empty.
   */
  public PlaceRepresentationModelAssert hasNoDisplayNames() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have displayNames but had :\n  <%s>";
    
    // check
    if (!actual.getDisplayNames().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDisplayNames());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual PlaceRepresentationModel's fromYear is equal to the given one.
   * @param fromYear the given fromYear to compare the actual PlaceRepresentationModel's fromYear to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's fromYear is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasFromYear(Integer fromYear) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected fromYear of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualFromYear = actual.getFromYear();
    if (!org.assertj.core.util.Objects.areEqual(actualFromYear, fromYear)) {
      failWithMessage(assertjErrorMessage, actual, fromYear, actualFromYear);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's fullDisplayName is equal to the given one.
   * @param fullDisplayName the given fullDisplayName to compare the actual PlaceRepresentationModel's fullDisplayName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's fullDisplayName is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasFullDisplayName(NameModel fullDisplayName) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected fullDisplayName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    NameModel actualFullDisplayName = actual.getFullDisplayName();
    if (!org.assertj.core.util.Objects.areEqual(actualFullDisplayName, fullDisplayName)) {
      failWithMessage(assertjErrorMessage, actual, fullDisplayName, actualFullDisplayName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's group is equal to the given one.
   * @param group the given group to compare the actual PlaceRepresentationModel's group to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's group is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasGroup(PlaceTypeGroupModel group) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected group of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    PlaceTypeGroupModel actualGroup = actual.getGroup();
    if (!org.assertj.core.util.Objects.areEqual(actualGroup, group)) {
      failWithMessage(assertjErrorMessage, actual, group, actualGroup);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's id is equal to the given one.
   * @param id the given id to compare the actual PlaceRepresentationModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's id is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasId(Integer id) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's jurisdiction is equal to the given one.
   * @param jurisdiction the given jurisdiction to compare the actual PlaceRepresentationModel's jurisdiction to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's jurisdiction is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasJurisdiction(JurisdictionModel jurisdiction) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected jurisdiction of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    JurisdictionModel actualJurisdiction = actual.getJurisdiction();
    if (!org.assertj.core.util.Objects.areEqual(actualJurisdiction, jurisdiction)) {
      failWithMessage(assertjErrorMessage, actual, jurisdiction, actualJurisdiction);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's links contains the given LinkModel elements.
   * @param links the given elements that should be contained in actual PlaceRepresentationModel's links.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's links does not contain all given LinkModel elements.
   */
  public PlaceRepresentationModelAssert hasLinks(LinkModel... links) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check that given LinkModel varargs is not null.
    if (links == null) throw new AssertionError("Expecting links parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getLinks()).contains(links);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getLinks().contains(links)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getLinks()).overridingErrorMessage("\nmy error message %s", "arg1").contains(links);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel has no links.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceRepresentationModel's links is not empty.
   */
  public PlaceRepresentationModelAssert hasNoLinks() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have links but had :\n  <%s>";
    
    // check
    if (!actual.getLinks().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLinks());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual PlaceRepresentationModel's location is equal to the given one.
   * @param location the given location to compare the actual PlaceRepresentationModel's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's location is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasLocation(LocationModel location) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LocationModel actualLocation = actual.getLocation();
    if (!org.assertj.core.util.Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's ownerId is equal to the given one.
   * @param ownerId the given ownerId to compare the actual PlaceRepresentationModel's ownerId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's ownerId is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasOwnerId(Integer ownerId) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected ownerId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualOwnerId = actual.getOwnerId();
    if (!org.assertj.core.util.Objects.areEqual(actualOwnerId, ownerId)) {
      failWithMessage(assertjErrorMessage, actual, ownerId, actualOwnerId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's preferredLocale is equal to the given one.
   * @param preferredLocale the given preferredLocale to compare the actual PlaceRepresentationModel's preferredLocale to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's preferredLocale is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasPreferredLocale(String preferredLocale) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected preferredLocale of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPreferredLocale = actual.getPreferredLocale();
    if (!org.assertj.core.util.Objects.areEqual(actualPreferredLocale, preferredLocale)) {
      failWithMessage(assertjErrorMessage, actual, preferredLocale, actualPreferredLocale);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel is published.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel is not published.
   */
  public PlaceRepresentationModelAssert isPublished() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isPublished()) {
      failWithMessage("\nExpected actual PlaceRepresentationModel to be published but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel is not published.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel is published.
   */
  public PlaceRepresentationModelAssert isNotPublished() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isPublished()) {
      failWithMessage("\nExpected actual PlaceRepresentationModel not to be published but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's revision is equal to the given one.
   * @param revision the given revision to compare the actual PlaceRepresentationModel's revision to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's revision is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasRevision(Integer revision) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected revision of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualRevision = actual.getRevision();
    if (!org.assertj.core.util.Objects.areEqual(actualRevision, revision)) {
      failWithMessage(assertjErrorMessage, actual, revision, actualRevision);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's toYear is equal to the given one.
   * @param toYear the given toYear to compare the actual PlaceRepresentationModel's toYear to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's toYear is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasToYear(Integer toYear) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected toYear of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualToYear = actual.getToYear();
    if (!org.assertj.core.util.Objects.areEqual(actualToYear, toYear)) {
      failWithMessage(assertjErrorMessage, actual, toYear, actualToYear);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's type is equal to the given one.
   * @param type the given type to compare the actual PlaceRepresentationModel's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's type is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasType(TypeModel type) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel's uUID is equal to the given one.
   * @param uUID the given uUID to compare the actual PlaceRepresentationModel's uUID to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel's uUID is not equal to the given one.
   */
  public PlaceRepresentationModelAssert hasUUID(String uUID) {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected uUID of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUUID = actual.getUUID();
    if (!org.assertj.core.util.Objects.areEqual(actualUUID, uUID)) {
      failWithMessage(assertjErrorMessage, actual, uUID, actualUUID);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel is validated.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel is not validated.
   */
  public PlaceRepresentationModelAssert isValidated() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isValidated()) {
      failWithMessage("\nExpected actual PlaceRepresentationModel to be validated but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceRepresentationModel is not validated.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceRepresentationModel is validated.
   */
  public PlaceRepresentationModelAssert isNotValidated() {
    // check that actual PlaceRepresentationModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isValidated()) {
      failWithMessage("\nExpected actual PlaceRepresentationModel not to be validated but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
