package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link PlaceSearchResultModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlaceSearchResultModelAssert extends AbstractAssert<PlaceSearchResultModelAssert, PlaceSearchResultModel> {

  /**
   * Creates a new </code>{@link PlaceSearchResultModelAssert}</code> to make assertions on actual PlaceSearchResultModel.
   * @param actual the PlaceSearchResultModel we want to make assertions on.
   */
  public PlaceSearchResultModelAssert(PlaceSearchResultModel actual) {
    super(actual, PlaceSearchResultModelAssert.class);
  }

  /**
   * An entry point for PlaceSearchResultModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlaceSearchResultModel)</code> and get specific assertion with code completion.
   * @param actual the PlaceSearchResultModel we want to make assertions on.
   * @return a new </code>{@link PlaceSearchResultModelAssert}</code>
   */
  public static PlaceSearchResultModelAssert assertThat(PlaceSearchResultModel actual) {
    return new PlaceSearchResultModelAssert(actual);
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's distanceInKM is equal to the given one.
   * @param distanceInKM the given distanceInKM to compare the actual PlaceSearchResultModel's distanceInKM to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's distanceInKM is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasDistanceInKM(Double distanceInKM) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected distanceInKM of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualDistanceInKM = actual.getDistanceInKM();
    if (!org.assertj.core.util.Objects.areEqual(actualDistanceInKM, distanceInKM)) {
      failWithMessage(assertjErrorMessage, actual, distanceInKM, actualDistanceInKM);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's distanceInMiles is equal to the given one.
   * @param distanceInMiles the given distanceInMiles to compare the actual PlaceSearchResultModel's distanceInMiles to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's distanceInMiles is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasDistanceInMiles(Double distanceInMiles) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected distanceInMiles of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualDistanceInMiles = actual.getDistanceInMiles();
    if (!org.assertj.core.util.Objects.areEqual(actualDistanceInMiles, distanceInMiles)) {
      failWithMessage(assertjErrorMessage, actual, distanceInMiles, actualDistanceInMiles);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's rawScore is equal to the given one.
   * @param rawScore the given rawScore to compare the actual PlaceSearchResultModel's rawScore to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's rawScore is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasRawScore(Integer rawScore) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected rawScore of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualRawScore = actual.getRawScore();
    if (!org.assertj.core.util.Objects.areEqual(actualRawScore, rawScore)) {
      failWithMessage(assertjErrorMessage, actual, rawScore, actualRawScore);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's relevanceScore is equal to the given one.
   * @param relevanceScore the given relevanceScore to compare the actual PlaceSearchResultModel's relevanceScore to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's relevanceScore is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasRelevanceScore(Integer relevanceScore) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected relevanceScore of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualRelevanceScore = actual.getRelevanceScore();
    if (!org.assertj.core.util.Objects.areEqual(actualRelevanceScore, relevanceScore)) {
      failWithMessage(assertjErrorMessage, actual, relevanceScore, actualRelevanceScore);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's rep is equal to the given one.
   * @param rep the given rep to compare the actual PlaceSearchResultModel's rep to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's rep is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasRep(PlaceRepresentationModel rep) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected rep of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    PlaceRepresentationModel actualRep = actual.getRep();
    if (!org.assertj.core.util.Objects.areEqual(actualRep, rep)) {
      failWithMessage(assertjErrorMessage, actual, rep, actualRep);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's scorers is equal to the given one.
   * @param scorers the given scorers to compare the actual PlaceSearchResultModel's scorers to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchResultModel's scorers is not equal to the given one.
   */
  public PlaceSearchResultModelAssert hasScorers(ScorersModel scorers) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected scorers of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ScorersModel actualScorers = actual.getScorers();
    if (!org.assertj.core.util.Objects.areEqual(actualScorers, scorers)) {
      failWithMessage(assertjErrorMessage, actual, scorers, actualScorers);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel's tokenMatches contains the given TokenMatch elements.
   * @param tokenMatches the given elements that should be contained in actual PlaceSearchResultModel's tokenMatches.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceSearchResultModel's tokenMatches does not contain all given TokenMatch elements.
   */
  public PlaceSearchResultModelAssert hasTokenMatches(TokenMatch... tokenMatches) {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // check that given TokenMatch varargs is not null.
    if (tokenMatches == null) throw new AssertionError("Expecting tokenMatches parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTokenMatches()).contains(tokenMatches);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getTokenMatches().contains(tokenMatches)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getTokenMatches()).overridingErrorMessage("\nmy error message %s", "arg1").contains(tokenMatches);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchResultModel has no tokenMatches.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceSearchResultModel's tokenMatches is not empty.
   */
  public PlaceSearchResultModelAssert hasNoTokenMatches() {
    // check that actual PlaceSearchResultModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have tokenMatches but had :\n  <%s>";
    
    // check
    if (!actual.getTokenMatches().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTokenMatches());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
