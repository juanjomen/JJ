package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link RootModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class RootModelAssert extends AbstractAssert<RootModelAssert, RootModel> {

  /**
   * Creates a new </code>{@link RootModelAssert}</code> to make assertions on actual RootModel.
   * @param actual the RootModel we want to make assertions on.
   */
  public RootModelAssert(RootModel actual) {
    super(actual, RootModelAssert.class);
  }

  /**
   * An entry point for RootModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myRootModel)</code> and get specific assertion with code completion.
   * @param actual the RootModel we want to make assertions on.
   * @return a new </code>{@link RootModelAssert}</code>
   */
  public static RootModelAssert assertThat(RootModel actual) {
    return new RootModelAssert(actual);
  }

  /**
   * Verifies that the actual RootModel's attribute is equal to the given one.
   * @param attribute the given attribute to compare the actual RootModel's attribute to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's attribute is not equal to the given one.
   */
  public RootModelAssert hasAttribute(AttributeModel attribute) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected attribute of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    AttributeModel actualAttribute = actual.getAttribute();
    if (!org.assertj.core.util.Objects.areEqual(actualAttribute, attribute)) {
      failWithMessage(assertjErrorMessage, actual, attribute, actualAttribute);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's attributeType is equal to the given one.
   * @param attributeType the given attributeType to compare the actual RootModel's attributeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's attributeType is not equal to the given one.
   */
  public RootModelAssert hasAttributeType(TypeModel attributeType) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected attributeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualAttributeType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualAttributeType, attributeType)) {
      failWithMessage(assertjErrorMessage, actual, attributeType, actualAttributeType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's attributeTypes contains the given TypeModel elements.
   * @param attributeTypes the given elements that should be contained in actual RootModel's attributeTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's attributeTypes does not contain all given TypeModel elements.
   */
  public RootModelAssert hasAttributeTypes(TypeModel... attributeTypes) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeModel varargs is not null.
    if (attributeTypes == null) throw new AssertionError("Expecting attributeTypes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTypes()).contains(attributeTypes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getAttributeTypes().contains(attributeTypes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getAttributeTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(attributeTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no attributeTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's attributeTypes is not empty.
   */
  public RootModelAssert hasNoAttributeTypes() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have attributeTypes but had :\n  <%s>";
    
    // check
    if (!actual.getTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's attributes contains the given AttributeModel elements.
   * @param attributes the given elements that should be contained in actual RootModel's attributes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's attributes does not contain all given AttributeModel elements.
   */
  public RootModelAssert hasAttributes(AttributeModel... attributes) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given AttributeModel varargs is not null.
    if (attributes == null) throw new AssertionError("Expecting attributes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getAttributes()).contains(attributes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getAttributes().contains(attributes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getAttributes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(attributes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no attributes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's attributes is not empty.
   */
  public RootModelAssert hasNoAttributes() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have attributes but had :\n  <%s>";
    
    // check
    if (!actual.getAttributes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAttributes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's citation is equal to the given one.
   * @param citation the given citation to compare the actual RootModel's citation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's citation is not equal to the given one.
   */
  public RootModelAssert hasCitation(CitationModel citation) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected citation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    CitationModel actualCitation = actual.getCitation();
    if (!org.assertj.core.util.Objects.areEqual(actualCitation, citation)) {
      failWithMessage(assertjErrorMessage, actual, citation, actualCitation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's citationType is equal to the given one.
   * @param citationType the given citationType to compare the actual RootModel's citationType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's citationType is not equal to the given one.
   */
  public RootModelAssert hasCitationType(TypeModel citationType) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected citationType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualCitationType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualCitationType, citationType)) {
      failWithMessage(assertjErrorMessage, actual, citationType, actualCitationType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's citationTypes contains the given TypeModel elements.
   * @param citationTypes the given elements that should be contained in actual RootModel's citationTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's citationTypes does not contain all given TypeModel elements.
   */
  public RootModelAssert hasCitationTypes(TypeModel... citationTypes) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeModel varargs is not null.
    if (citationTypes == null) throw new AssertionError("Expecting citationTypes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTypes()).contains(citationTypes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getCitationTypes().contains(citationTypes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getCitationTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(citationTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no citationTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's citationTypes is not empty.
   */
  public RootModelAssert hasNoCitationTypes() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have citationTypes but had :\n  <%s>";
    
    // check
    if (!actual.getTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's citations contains the given CitationModel elements.
   * @param citations the given elements that should be contained in actual RootModel's citations.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's citations does not contain all given CitationModel elements.
   */
  public RootModelAssert hasCitations(CitationModel... citations) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given CitationModel varargs is not null.
    if (citations == null) throw new AssertionError("Expecting citations parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getCitations()).contains(citations);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getCitations().contains(citations)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getCitations()).overridingErrorMessage("\nmy error message %s", "arg1").contains(citations);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no citations.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's citations is not empty.
   */
  public RootModelAssert hasNoCitations() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have citations but had :\n  <%s>";
    
    // check
    if (!actual.getCitations().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCitations());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's healthCheck is equal to the given one.
   * @param healthCheck the given healthCheck to compare the actual RootModel's healthCheck to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's healthCheck is not equal to the given one.
   */
  public RootModelAssert hasHealthCheck(HealthCheckModel healthCheck) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected healthCheck of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HealthCheckModel actualHealthCheck = actual.getHealthCheck();
    if (!org.assertj.core.util.Objects.areEqual(actualHealthCheck, healthCheck)) {
      failWithMessage(assertjErrorMessage, actual, healthCheck, actualHealthCheck);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's place is equal to the given one.
   * @param place the given place to compare the actual RootModel's place to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's place is not equal to the given one.
   */
  public RootModelAssert hasPlace(PlaceModel place) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected place of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    PlaceModel actualPlace = actual.getPlace();
    if (!org.assertj.core.util.Objects.areEqual(actualPlace, place)) {
      failWithMessage(assertjErrorMessage, actual, place, actualPlace);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's placeNameType is equal to the given one.
   * @param placeNameType the given placeNameType to compare the actual RootModel's placeNameType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's placeNameType is not equal to the given one.
   */
  public RootModelAssert hasPlaceNameType(TypeModel placeNameType) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected placeNameType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualPlaceNameType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualPlaceNameType, placeNameType)) {
      failWithMessage(assertjErrorMessage, actual, placeNameType, actualPlaceNameType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's placeNameTypes contains the given TypeModel elements.
   * @param placeNameTypes the given elements that should be contained in actual RootModel's placeNameTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeNameTypes does not contain all given TypeModel elements.
   */
  public RootModelAssert hasPlaceNameTypes(TypeModel... placeNameTypes) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeModel varargs is not null.
    if (placeNameTypes == null) throw new AssertionError("Expecting placeNameTypes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTypes()).contains(placeNameTypes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getPlaceNameTypes().contains(placeNameTypes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getPlaceNameTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(placeNameTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no placeNameTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeNameTypes is not empty.
   */
  public RootModelAssert hasNoPlaceNameTypes() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have placeNameTypes but had :\n  <%s>";
    
    // check
    if (!actual.getTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's placeRepresentation is equal to the given one.
   * @param placeRepresentation the given placeRepresentation to compare the actual RootModel's placeRepresentation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's placeRepresentation is not equal to the given one.
   */
  public RootModelAssert hasPlaceRepresentation(PlaceRepresentationModel placeRepresentation) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected placeRepresentation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    PlaceRepresentationModel actualPlaceRepresentation = actual.getPlaceRepresentation();
    if (!org.assertj.core.util.Objects.areEqual(actualPlaceRepresentation, placeRepresentation)) {
      failWithMessage(assertjErrorMessage, actual, placeRepresentation, actualPlaceRepresentation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's placeType is equal to the given one.
   * @param placeType the given placeType to compare the actual RootModel's placeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's placeType is not equal to the given one.
   */
  public RootModelAssert hasPlaceType(TypeModel placeType) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected placeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualPlaceType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualPlaceType, placeType)) {
      failWithMessage(assertjErrorMessage, actual, placeType, actualPlaceType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's placeTypeGroup is equal to the given one.
   * @param placeTypeGroup the given placeTypeGroup to compare the actual RootModel's placeTypeGroup to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's placeTypeGroup is not equal to the given one.
   */
  public RootModelAssert hasPlaceTypeGroup(PlaceTypeGroupModel placeTypeGroup) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected placeTypeGroup of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    PlaceTypeGroupModel actualPlaceTypeGroup = actual.getPlaceTypeGroup();
    if (!org.assertj.core.util.Objects.areEqual(actualPlaceTypeGroup, placeTypeGroup)) {
      failWithMessage(assertjErrorMessage, actual, placeTypeGroup, actualPlaceTypeGroup);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's placeTypeGroups contains the given TypeGroupModel elements.
   * @param placeTypeGroups the given elements that should be contained in actual RootModel's placeTypeGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeTypeGroups does not contain all given TypeGroupModel elements.
   */
  public RootModelAssert hasPlaceTypeGroups(PlaceTypeGroupModel... placeTypeGroups) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeGroupModel varargs is not null.
    if (placeTypeGroups == null) throw new AssertionError("Expecting placeTypeGroups parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getPlaceTypeGroups()).contains(placeTypeGroups);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getPlaceTypeGroups().contains(placeTypeGroups)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getPlaceTypeGroups()).overridingErrorMessage("\nmy error message %s", "arg1").contains(placeTypeGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no placeTypeGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeTypeGroups is not empty.
   */
  public RootModelAssert hasNoPlaceTypeGroups() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have placeTypeGroups but had :\n  <%s>";
    
    // check
    if (!actual.getPlaceTypeGroups().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPlaceTypeGroups());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's placeTypes contains the given TypeModel elements.
   * @param placeTypes the given elements that should be contained in actual RootModel's placeTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeTypes does not contain all given TypeModel elements.
   */
  public RootModelAssert hasPlaceTypes(TypeModel... placeTypes) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given TypeModel varargs is not null.
    if (placeTypes == null) throw new AssertionError("Expecting placeTypes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTypes()).contains(placeTypes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getPlaceTypes().contains(placeTypes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getPlaceTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(placeTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no placeTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's placeTypes is not empty.
   */
  public RootModelAssert hasNoPlaceTypes() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have placeTypes but had :\n  <%s>";
    
    // check
    if (!actual.getTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's requests contains the given PlaceSearchRequestModel elements.
   * @param requests the given elements that should be contained in actual RootModel's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's requests does not contain all given PlaceSearchRequestModel elements.
   */
  public RootModelAssert hasRequests(PlaceSearchRequestModel... requests) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given PlaceSearchRequestModel varargs is not null.
    if (requests == null) throw new AssertionError("Expecting requests parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getRequests()).contains(requests);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getRequests().contains(requests)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getRequests()).overridingErrorMessage("\nmy error message %s", "arg1").contains(requests);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no requests.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's requests is not empty.
   */
  public RootModelAssert hasNoRequests() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have requests but had :\n  <%s>";
    
    // check
    if (!actual.getRequests().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRequests());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's searchResults contains the given PlaceSearchResultsModel elements.
   * @param searchResults the given elements that should be contained in actual RootModel's searchResults.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's searchResults does not contain all given PlaceSearchResultsModel elements.
   */
  public RootModelAssert hasSearchResults(PlaceSearchResultsModel... searchResults) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given PlaceSearchResultsModel varargs is not null.
    if (searchResults == null) throw new AssertionError("Expecting searchResults parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getSearchResults()).contains(searchResults);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getSearchResults().contains(searchResults)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getSearchResults()).overridingErrorMessage("\nmy error message %s", "arg1").contains(searchResults);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no searchResults.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's searchResults is not empty.
   */
  public RootModelAssert hasNoSearchResults() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have searchResults but had :\n  <%s>";
    
    // check
    if (!actual.getSearchResults().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSearchResults());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual RootModel's source is equal to the given one.
   * @param source the given source to compare the actual RootModel's source to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootModel's source is not equal to the given one.
   */
  public RootModelAssert hasSource(SourceModel source) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected source of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    SourceModel actualSource = actual.getSource();
    if (!org.assertj.core.util.Objects.areEqual(actualSource, source)) {
      failWithMessage(assertjErrorMessage, actual, source, actualSource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel's sources contains the given SourceModel elements.
   * @param sources the given elements that should be contained in actual RootModel's sources.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's sources does not contain all given SourceModel elements.
   */
  public RootModelAssert hasSources(SourceModel... sources) {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // check that given SourceModel varargs is not null.
    if (sources == null) throw new AssertionError("Expecting sources parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getSources()).contains(sources);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getSources().contains(sources)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getSources()).overridingErrorMessage("\nmy error message %s", "arg1").contains(sources);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootModel has no sources.
   * @return this assertion object.
   * @throws AssertionError if the actual RootModel's sources is not empty.
   */
  public RootModelAssert hasNoSources() {
    // check that actual RootModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have sources but had :\n  <%s>";
    
    // check
    if (!actual.getSources().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSources());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
