package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link NameModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class NameModelAssert extends AbstractAssert<NameModelAssert, NameModel> {

  /**
   * Creates a new </code>{@link NameModelAssert}</code> to make assertions on actual NameModel.
   * @param actual the NameModel we want to make assertions on.
   */
  public NameModelAssert(NameModel actual) {
    super(actual, NameModelAssert.class);
  }

  /**
   * An entry point for NameModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myNameModel)</code> and get specific assertion with code completion.
   * @param actual the NameModel we want to make assertions on.
   * @return a new </code>{@link NameModelAssert}</code>
   */
  public static NameModelAssert assertThat(NameModel actual) {
    return new NameModelAssert(actual);
  }

  /**
   * Verifies that the actual NameModel's locale is equal to the given one.
   * @param locale the given locale to compare the actual NameModel's locale to.
   * @return this assertion object.
   * @throws AssertionError - if the actual NameModel's locale is not equal to the given one.
   */
  public NameModelAssert hasLocale(String locale) {
    // check that actual NameModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected locale of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLocale = actual.getLocale();
    if (!org.assertj.core.util.Objects.areEqual(actualLocale, locale)) {
      failWithMessage(assertjErrorMessage, actual, locale, actualLocale);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual NameModel's name is equal to the given one.
   * @param name the given name to compare the actual NameModel's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual NameModel's name is not equal to the given one.
   */
  public NameModelAssert hasName(String name) {
    // check that actual NameModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
