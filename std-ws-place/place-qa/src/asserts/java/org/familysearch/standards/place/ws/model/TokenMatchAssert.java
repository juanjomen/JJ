package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link TokenMatch} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TokenMatchAssert extends AbstractAssert<TokenMatchAssert, TokenMatch> {

  /**
   * Creates a new </code>{@link TokenMatchAssert}</code> to make assertions on actual TokenMatch.
   * @param actual the TokenMatch we want to make assertions on.
   */
  public TokenMatchAssert(TokenMatch actual) {
    super(actual, TokenMatchAssert.class);
  }

  /**
   * An entry point for TokenMatchAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myTokenMatch)</code> and get specific assertion with code completion.
   * @param actual the TokenMatch we want to make assertions on.
   * @return a new </code>{@link TokenMatchAssert}</code>
   */
  public static TokenMatchAssert assertThat(TokenMatch actual) {
    return new TokenMatchAssert(actual);
  }

  /**
   * Verifies that the actual TokenMatch's id is equal to the given one.
   * @param id the given id to compare the actual TokenMatch's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TokenMatch's id is not equal to the given one.
   */
  public TokenMatchAssert hasId(Integer id) {
    // check that actual TokenMatch we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TokenMatch's token is equal to the given one.
   * @param token the given token to compare the actual TokenMatch's token to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TokenMatch's token is not equal to the given one.
   */
  public TokenMatchAssert hasToken(String token) {
    // check that actual TokenMatch we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected token of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualToken = actual.getToken();
    if (!org.assertj.core.util.Objects.areEqual(actualToken, token)) {
      failWithMessage(assertjErrorMessage, actual, token, actualToken);
    }

    // return the current assertion for method chaining
    return this;
  }

}
