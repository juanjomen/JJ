package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link AttributeModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class AttributeModelAssert extends AbstractAssert<AttributeModelAssert, AttributeModel> {

  /**
   * Creates a new </code>{@link AttributeModelAssert}</code> to make assertions on actual AttributeModel.
   * @param actual the AttributeModel we want to make assertions on.
   */
  public AttributeModelAssert(AttributeModel actual) {
    super(actual, AttributeModelAssert.class);
  }

  /**
   * An entry point for AttributeModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myAttributeModel)</code> and get specific assertion with code completion.
   * @param actual the AttributeModel we want to make assertions on.
   * @return a new </code>{@link AttributeModelAssert}</code>
   */
  public static AttributeModelAssert assertThat(AttributeModel actual) {
    return new AttributeModelAssert(actual);
  }

  /**
   * Verifies that the actual AttributeModel's id is equal to the given one.
   * @param id the given id to compare the actual AttributeModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AttributeModel's id is not equal to the given one.
   */
  public AttributeModelAssert hasId(Integer id) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AttributeModel's links contains the given LinkModel elements.
   * @param links the given elements that should be contained in actual AttributeModel's links.
   * @return this assertion object.
   * @throws AssertionError if the actual AttributeModel's links does not contain all given LinkModel elements.
   */
  public AttributeModelAssert hasLinks(LinkModel... links) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // check that given LinkModel varargs is not null.
    if (links == null) throw new AssertionError("Expecting links parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getLinks()).contains(links);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getLinks().contains(links)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getLinks()).overridingErrorMessage("\nmy error message %s", "arg1").contains(links);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AttributeModel has no links.
   * @return this assertion object.
   * @throws AssertionError if the actual AttributeModel's links is not empty.
   */
  public AttributeModelAssert hasNoLinks() {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have links but had :\n  <%s>";
    
    // check
    if (!actual.getLinks().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLinks());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual AttributeModel's repId is equal to the given one.
   * @param repId the given repId to compare the actual AttributeModel's repId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AttributeModel's repId is not equal to the given one.
   */
  public AttributeModelAssert hasRepId(Integer repId) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected repId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualRepId = actual.getRepId();
    if (!org.assertj.core.util.Objects.areEqual(actualRepId, repId)) {
      failWithMessage(assertjErrorMessage, actual, repId, actualRepId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AttributeModel's type is equal to the given one.
   * @param type the given type to compare the actual AttributeModel's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AttributeModel's type is not equal to the given one.
   */
  public AttributeModelAssert hasType(TypeModel type) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AttributeModel's value is equal to the given one.
   * @param value the given value to compare the actual AttributeModel's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AttributeModel's value is not equal to the given one.
   */
  public AttributeModelAssert hasValue(String value) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualValue = actual.getValue();
    if (!org.assertj.core.util.Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AttributeModel's year is equal to the given one.
   * @param year the given year to compare the actual AttributeModel's year to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AttributeModel's year is not equal to the given one.
   */
  public AttributeModelAssert hasYear(Integer year) {
    // check that actual AttributeModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected year of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualYear = actual.getYear();
    if (!org.assertj.core.util.Objects.areEqual(actualYear, year)) {
      failWithMessage(assertjErrorMessage, actual, year, actualYear);
    }

    // return the current assertion for method chaining
    return this;
  }

}
