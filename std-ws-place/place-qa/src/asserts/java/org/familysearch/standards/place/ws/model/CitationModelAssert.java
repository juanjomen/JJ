package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import java.util.Date;


/**
 * {@link CitationModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CitationModelAssert extends AbstractAssert<CitationModelAssert, CitationModel> {

  /**
   * Creates a new </code>{@link CitationModelAssert}</code> to make assertions on actual CitationModel.
   * @param actual the CitationModel we want to make assertions on.
   */
  public CitationModelAssert(CitationModel actual) {
    super(actual, CitationModelAssert.class);
  }

  /**
   * An entry point for CitationModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myCitationModel)</code> and get specific assertion with code completion.
   * @param actual the CitationModel we want to make assertions on.
   * @return a new </code>{@link CitationModelAssert}</code>
   */
  public static CitationModelAssert assertThat(CitationModel actual) {
    return new CitationModelAssert(actual);
  }

  /**
   * Verifies that the actual CitationModel's citDate is equal to the given one.
   * @param citDate the given citDate to compare the actual CitationModel's citDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's citDate is not equal to the given one.
   */
  public CitationModelAssert hasCitDate(Date citDate) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected citDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualCitDate = actual.getCitDate();
    if (!org.assertj.core.util.Objects.areEqual(actualCitDate, citDate)) {
      failWithMessage(assertjErrorMessage, actual, citDate, actualCitDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's description is equal to the given one.
   * @param description the given description to compare the actual CitationModel's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's description is not equal to the given one.
   */
  public CitationModelAssert hasDescription(String description) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!org.assertj.core.util.Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's id is equal to the given one.
   * @param id the given id to compare the actual CitationModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's id is not equal to the given one.
   */
  public CitationModelAssert hasId(Integer id) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's links contains the given LinkModel elements.
   * @param links the given elements that should be contained in actual CitationModel's links.
   * @return this assertion object.
   * @throws AssertionError if the actual CitationModel's links does not contain all given LinkModel elements.
   */
  public CitationModelAssert hasLinks(LinkModel... links) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // check that given LinkModel varargs is not null.
    if (links == null) throw new AssertionError("Expecting links parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getLinks()).contains(links);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getLinks().contains(links)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getLinks()).overridingErrorMessage("\nmy error message %s", "arg1").contains(links);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel has no links.
   * @return this assertion object.
   * @throws AssertionError if the actual CitationModel's links is not empty.
   */
  public CitationModelAssert hasNoLinks() {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have links but had :\n  <%s>";
    
    // check
    if (!actual.getLinks().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLinks());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual CitationModel's repId is equal to the given one.
   * @param repId the given repId to compare the actual CitationModel's repId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's repId is not equal to the given one.
   */
  public CitationModelAssert hasRepId(Integer repId) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected repId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualRepId = actual.getRepId();
    if (!org.assertj.core.util.Objects.areEqual(actualRepId, repId)) {
      failWithMessage(assertjErrorMessage, actual, repId, actualRepId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's sourceId is equal to the given one.
   * @param sourceId the given sourceId to compare the actual CitationModel's sourceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's sourceId is not equal to the given one.
   */
  public CitationModelAssert hasSourceId(Integer sourceId) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sourceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualSourceId = actual.getSourceId();
    if (!org.assertj.core.util.Objects.areEqual(actualSourceId, sourceId)) {
      failWithMessage(assertjErrorMessage, actual, sourceId, actualSourceId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's sourceRef is equal to the given one.
   * @param sourceRef the given sourceRef to compare the actual CitationModel's sourceRef to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's sourceRef is not equal to the given one.
   */
  public CitationModelAssert hasSourceRef(String sourceRef) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sourceRef of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSourceRef = actual.getSourceRef();
    if (!org.assertj.core.util.Objects.areEqual(actualSourceRef, sourceRef)) {
      failWithMessage(assertjErrorMessage, actual, sourceRef, actualSourceRef);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CitationModel's type is equal to the given one.
   * @param type the given type to compare the actual CitationModel's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CitationModel's type is not equal to the given one.
   */
  public CitationModelAssert hasType(TypeModel type) {
    // check that actual CitationModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    TypeModel actualType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
