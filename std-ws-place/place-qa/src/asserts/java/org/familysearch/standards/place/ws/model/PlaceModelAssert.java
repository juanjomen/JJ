package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link PlaceModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlaceModelAssert extends AbstractAssert<PlaceModelAssert, PlaceModel> {

  /**
   * Creates a new </code>{@link PlaceModelAssert}</code> to make assertions on actual PlaceModel.
   * @param actual the PlaceModel we want to make assertions on.
   */
  public PlaceModelAssert(PlaceModel actual) {
    super(actual, PlaceModelAssert.class);
  }

  /**
   * An entry point for PlaceModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlaceModel)</code> and get specific assertion with code completion.
   * @param actual the PlaceModel we want to make assertions on.
   * @return a new </code>{@link PlaceModelAssert}</code>
   */
  public static PlaceModelAssert assertThat(PlaceModel actual) {
    return new PlaceModelAssert(actual);
  }

  /**
   * Verifies that the actual PlaceModel's fromYear is equal to the given one.
   * @param fromYear the given fromYear to compare the actual PlaceModel's fromYear to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceModel's fromYear is not equal to the given one.
   */
  public PlaceModelAssert hasFromYear(Integer fromYear) {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected fromYear of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualFromYear = actual.getFromYear();
    if (!org.assertj.core.util.Objects.areEqual(actualFromYear, fromYear)) {
      failWithMessage(assertjErrorMessage, actual, fromYear, actualFromYear);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceModel's id is equal to the given one.
   * @param id the given id to compare the actual PlaceModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceModel's id is not equal to the given one.
   */
  public PlaceModelAssert hasId(Integer id) {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceModel's reps contains the given PlaceRepresentationModel elements.
   * @param reps the given elements that should be contained in actual PlaceModel's reps.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceModel's reps does not contain all given PlaceRepresentationModel elements.
   */
  public PlaceModelAssert hasReps(PlaceRepresentationModel... reps) {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // check that given PlaceRepresentationModel varargs is not null.
    if (reps == null) throw new AssertionError("Expecting reps parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getReps()).contains(reps);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getReps().contains(reps)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getReps()).overridingErrorMessage("\nmy error message %s", "arg1").contains(reps);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceModel has no reps.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceModel's reps is not empty.
   */
  public PlaceModelAssert hasNoReps() {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have reps but had :\n  <%s>";
    
    // check
    if (!actual.getReps().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReps());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual PlaceModel's toYear is equal to the given one.
   * @param toYear the given toYear to compare the actual PlaceModel's toYear to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceModel's toYear is not equal to the given one.
   */
  public PlaceModelAssert hasToYear(Integer toYear) {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected toYear of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualToYear = actual.getToYear();
    if (!org.assertj.core.util.Objects.areEqual(actualToYear, toYear)) {
      failWithMessage(assertjErrorMessage, actual, toYear, actualToYear);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceModel's variants contains the given VariantModel elements.
   * @param variants the given elements that should be contained in actual PlaceModel's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceModel's variants does not contain all given VariantModel elements.
   */
  public PlaceModelAssert hasVariants(VariantModel... variants) {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // check that given VariantModel varargs is not null.
    if (variants == null) throw new AssertionError("Expecting variants parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getVariants()).contains(variants);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getVariants().contains(variants)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getVariants()).overridingErrorMessage("\nmy error message %s", "arg1").contains(variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceModel has no variants.
   * @return this assertion object.
   * @throws AssertionError if the actual PlaceModel's variants is not empty.
   */
  public PlaceModelAssert hasNoVariants() {
    // check that actual PlaceModel we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have variants but had :\n  <%s>";
    
    // check
    if (!actual.getVariants().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariants());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
