package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link PlaceSearchRequestModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlaceSearchRequestModelAssert extends AbstractAssert<PlaceSearchRequestModelAssert, PlaceSearchRequestModel> {

  /**
   * Creates a new </code>{@link PlaceSearchRequestModelAssert}</code> to make assertions on actual PlaceSearchRequestModel.
   * @param actual the PlaceSearchRequestModel we want to make assertions on.
   */
  public PlaceSearchRequestModelAssert(PlaceSearchRequestModel actual) {
    super(actual, PlaceSearchRequestModelAssert.class);
  }

  /**
   * An entry point for PlaceSearchRequestModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlaceSearchRequestModel)</code> and get specific assertion with code completion.
   * @param actual the PlaceSearchRequestModel we want to make assertions on.
   * @return a new </code>{@link PlaceSearchRequestModelAssert}</code>
   */
  public static PlaceSearchRequestModelAssert assertThat(PlaceSearchRequestModel actual) {
    return new PlaceSearchRequestModelAssert(actual);
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's acceptLanguage is equal to the given one.
   * @param acceptLanguage the given acceptLanguage to compare the actual PlaceSearchRequestModel's acceptLanguage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's acceptLanguage is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasAcceptLanguage(String acceptLanguage) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected acceptLanguage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAcceptLanguage = actual.getAcceptLanguage();
    if (!org.assertj.core.util.Objects.areEqual(actualAcceptLanguage, acceptLanguage)) {
      failWithMessage(assertjErrorMessage, actual, acceptLanguage, actualAcceptLanguage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's distance is equal to the given one.
   * @param distance the given distance to compare the actual PlaceSearchRequestModel's distance to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's distance is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasDistance(String distance) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected distance of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDistance = actual.getDistance();
    if (!org.assertj.core.util.Objects.areEqual(actualDistance, distance)) {
      failWithMessage(assertjErrorMessage, actual, distance, actualDistance);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is filter.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is not filter.
   */
  public PlaceSearchRequestModelAssert isFilter() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getFilter()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel to be filter but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is not filter.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is filter.
   */
  public PlaceSearchRequestModelAssert isNotFilter() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getFilter()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel not to be filter but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's filterParents is equal to the given one.
   * @param filterParents the given filterParents to compare the actual PlaceSearchRequestModel's filterParents to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's filterParents is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasFilterParents(String filterParents) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected filterParents of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFilterParents = actual.getFilterParents();
    if (!org.assertj.core.util.Objects.areEqual(actualFilterParents, filterParents)) {
      failWithMessage(assertjErrorMessage, actual, filterParents, actualFilterParents);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's filterTypeGroups is equal to the given one.
   * @param filterTypeGroups the given filterTypeGroups to compare the actual PlaceSearchRequestModel's filterTypeGroups to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's filterTypeGroups is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasFilterTypeGroups(String filterTypeGroups) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected filterTypeGroups of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFilterTypeGroups = actual.getFilterTypeGroups();
    if (!org.assertj.core.util.Objects.areEqual(actualFilterTypeGroups, filterTypeGroups)) {
      failWithMessage(assertjErrorMessage, actual, filterTypeGroups, actualFilterTypeGroups);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's filterTypes is equal to the given one.
   * @param filterTypes the given filterTypes to compare the actual PlaceSearchRequestModel's filterTypes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's filterTypes is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasFilterTypes(String filterTypes) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected filterTypes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFilterTypes = actual.getFilterTypes();
    if (!org.assertj.core.util.Objects.areEqual(actualFilterTypes, filterTypes)) {
      failWithMessage(assertjErrorMessage, actual, filterTypes, actualFilterTypes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's fuzzy is equal to the given one.
   * @param fuzzy the given fuzzy to compare the actual PlaceSearchRequestModel's fuzzy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's fuzzy is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasFuzzy(String fuzzy) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected fuzzy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFuzzy = actual.getFuzzy();
    if (!org.assertj.core.util.Objects.areEqual(actualFuzzy, fuzzy)) {
      failWithMessage(assertjErrorMessage, actual, fuzzy, actualFuzzy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's id is equal to the given one.
   * @param id the given id to compare the actual PlaceSearchRequestModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's id is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasId(int id) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is includeMetrics.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is not includeMetrics.
   */
  public PlaceSearchRequestModelAssert isIncludeMetrics() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getIncludeMetrics()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel to be includeMetrics but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is not includeMetrics.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is includeMetrics.
   */
  public PlaceSearchRequestModelAssert isNotIncludeMetrics() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getIncludeMetrics()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel not to be includeMetrics but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's language is equal to the given one.
   * @param language the given language to compare the actual PlaceSearchRequestModel's language to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's language is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasLanguage(String language) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected language of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLanguage = actual.getLanguage();
    if (!org.assertj.core.util.Objects.areEqual(actualLanguage, language)) {
      failWithMessage(assertjErrorMessage, actual, language, actualLanguage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's latitude is equal to the given one.
   * @param latitude the given latitude to compare the actual PlaceSearchRequestModel's latitude to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's latitude is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasLatitude(Double latitude) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected latitude of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualLatitude = actual.getLatitude();
    if (!org.assertj.core.util.Objects.areEqual(actualLatitude, latitude)) {
      failWithMessage(assertjErrorMessage, actual, latitude, actualLatitude);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's limit is equal to the given one.
   * @param limit the given limit to compare the actual PlaceSearchRequestModel's limit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's limit is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasLimit(int limit) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected limit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualLimit = actual.getLimit();
    if (actualLimit != limit) {
      failWithMessage(assertjErrorMessage, actual, limit, actualLimit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's longitude is equal to the given one.
   * @param longitude the given longitude to compare the actual PlaceSearchRequestModel's longitude to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's longitude is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasLongitude(Double longitude) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected longitude of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Double actualLongitude = actual.getLongitude();
    if (!org.assertj.core.util.Objects.areEqual(actualLongitude, longitude)) {
      failWithMessage(assertjErrorMessage, actual, longitude, actualLongitude);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's optDirParentIds is equal to the given one.
   * @param optDirParentIds the given optDirParentIds to compare the actual PlaceSearchRequestModel's optDirParentIds to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's optDirParentIds is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasOptDirParentIds(String optDirParentIds) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected optDirParentIds of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOptDirParentIds = actual.getOptDirParentIds();
    if (!org.assertj.core.util.Objects.areEqual(actualOptDirParentIds, optDirParentIds)) {
      failWithMessage(assertjErrorMessage, actual, optDirParentIds, actualOptDirParentIds);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's optionalParents is equal to the given one.
   * @param optionalParents the given optionalParents to compare the actual PlaceSearchRequestModel's optionalParents to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's optionalParents is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasOptionalParents(String optionalParents) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected optionalParents of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOptionalParents = actual.getOptionalParents();
    if (!org.assertj.core.util.Objects.areEqual(actualOptionalParents, optionalParents)) {
      failWithMessage(assertjErrorMessage, actual, optionalParents, actualOptionalParents);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's optionalTypes is equal to the given one.
   * @param optionalTypes the given optionalTypes to compare the actual PlaceSearchRequestModel's optionalTypes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's optionalTypes is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasOptionalTypes(String optionalTypes) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected optionalTypes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOptionalTypes = actual.getOptionalTypes();
    if (!org.assertj.core.util.Objects.areEqual(actualOptionalTypes, optionalTypes)) {
      failWithMessage(assertjErrorMessage, actual, optionalTypes, actualOptionalTypes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's optionalYears is equal to the given one.
   * @param optionalYears the given optionalYears to compare the actual PlaceSearchRequestModel's optionalYears to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's optionalYears is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasOptionalYears(String optionalYears) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected optionalYears of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOptionalYears = actual.getOptionalYears();
    if (!org.assertj.core.util.Objects.areEqual(actualOptionalYears, optionalYears)) {
      failWithMessage(assertjErrorMessage, actual, optionalYears, actualOptionalYears);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is partial.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is not partial.
   */
  public PlaceSearchRequestModelAssert isPartial() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getPartial()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel to be partial but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is not partial.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is partial.
   */
  public PlaceSearchRequestModelAssert isNotPartial() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getPartial()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel not to be partial but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's points is equal to the given one.
   * @param points the given points to compare the actual PlaceSearchRequestModel's points to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's points is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasPoints(String points) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected points of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPoints = actual.getPoints();
    if (!org.assertj.core.util.Objects.areEqual(actualPoints, points)) {
      failWithMessage(assertjErrorMessage, actual, points, actualPoints);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's priorityTypes is equal to the given one.
   * @param priorityTypes the given priorityTypes to compare the actual PlaceSearchRequestModel's priorityTypes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's priorityTypes is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasPriorityTypes(String priorityTypes) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected priorityTypes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPriorityTypes = actual.getPriorityTypes();
    if (!org.assertj.core.util.Objects.areEqual(actualPriorityTypes, priorityTypes)) {
      failWithMessage(assertjErrorMessage, actual, priorityTypes, actualPriorityTypes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's profile is equal to the given one.
   * @param profile the given profile to compare the actual PlaceSearchRequestModel's profile to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's profile is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasProfile(String profile) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected profile of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualProfile = actual.getProfile();
    if (!org.assertj.core.util.Objects.areEqual(actualProfile, profile)) {
      failWithMessage(assertjErrorMessage, actual, profile, actualProfile);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's publishedType is equal to the given one.
   * @param publishedType the given publishedType to compare the actual PlaceSearchRequestModel's publishedType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's publishedType is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasPublishedType(String publishedType) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected publishedType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPublishedType = actual.getPublishedType();
    if (!org.assertj.core.util.Objects.areEqual(actualPublishedType, publishedType)) {
      failWithMessage(assertjErrorMessage, actual, publishedType, actualPublishedType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's reqTypeGroups is equal to the given one.
   * @param reqTypeGroups the given reqTypeGroups to compare the actual PlaceSearchRequestModel's reqTypeGroups to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's reqTypeGroups is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasReqTypeGroups(String reqTypeGroups) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected reqTypeGroups of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReqTypeGroups = actual.getReqTypeGroups();
    if (!org.assertj.core.util.Objects.areEqual(actualReqTypeGroups, reqTypeGroups)) {
      failWithMessage(assertjErrorMessage, actual, reqTypeGroups, actualReqTypeGroups);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's requiredDirParents is equal to the given one.
   * @param requiredDirParents the given requiredDirParents to compare the actual PlaceSearchRequestModel's requiredDirParents to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's requiredDirParents is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasRequiredDirParents(String requiredDirParents) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected requiredDirParents of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRequiredDirParents = actual.getRequiredDirParents();
    if (!org.assertj.core.util.Objects.areEqual(actualRequiredDirParents, requiredDirParents)) {
      failWithMessage(assertjErrorMessage, actual, requiredDirParents, actualRequiredDirParents);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's requiredParents is equal to the given one.
   * @param requiredParents the given requiredParents to compare the actual PlaceSearchRequestModel's requiredParents to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's requiredParents is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasRequiredParents(String requiredParents) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected requiredParents of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRequiredParents = actual.getRequiredParents();
    if (!org.assertj.core.util.Objects.areEqual(actualRequiredParents, requiredParents)) {
      failWithMessage(assertjErrorMessage, actual, requiredParents, actualRequiredParents);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's requiredTypes is equal to the given one.
   * @param requiredTypes the given requiredTypes to compare the actual PlaceSearchRequestModel's requiredTypes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's requiredTypes is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasRequiredTypes(String requiredTypes) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected requiredTypes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRequiredTypes = actual.getRequiredTypes();
    if (!org.assertj.core.util.Objects.areEqual(actualRequiredTypes, requiredTypes)) {
      failWithMessage(assertjErrorMessage, actual, requiredTypes, actualRequiredTypes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's requiredYears is equal to the given one.
   * @param requiredYears the given requiredYears to compare the actual PlaceSearchRequestModel's requiredYears to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's requiredYears is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasRequiredYears(String requiredYears) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected requiredYears of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRequiredYears = actual.getRequiredYears();
    if (!org.assertj.core.util.Objects.areEqual(actualRequiredYears, requiredYears)) {
      failWithMessage(assertjErrorMessage, actual, requiredYears, actualRequiredYears);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's text is equal to the given one.
   * @param text the given text to compare the actual PlaceSearchRequestModel's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's text is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasText(String text) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualText = actual.getText();
    if (!org.assertj.core.util.Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's threshold is equal to the given one.
   * @param threshold the given threshold to compare the actual PlaceSearchRequestModel's threshold to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's threshold is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasThreshold(int threshold) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected threshold of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualThreshold = actual.getThreshold();
    if (actualThreshold != threshold) {
      failWithMessage(assertjErrorMessage, actual, threshold, actualThreshold);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is useWildcards.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is not useWildcards.
   */
  public PlaceSearchRequestModelAssert isUseWildcards() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getUseWildcards()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel to be useWildcards but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel is not useWildcards.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel is useWildcards.
   */
  public PlaceSearchRequestModelAssert isNotUseWildcards() {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getUseWildcards()) {
      failWithMessage("\nExpected actual PlaceSearchRequestModel not to be useWildcards but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's validatedType is equal to the given one.
   * @param validatedType the given validatedType to compare the actual PlaceSearchRequestModel's validatedType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's validatedType is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasValidatedType(String validatedType) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected validatedType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualValidatedType = actual.getValidatedType();
    if (!org.assertj.core.util.Objects.areEqual(actualValidatedType, validatedType)) {
      failWithMessage(assertjErrorMessage, actual, validatedType, actualValidatedType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PlaceSearchRequestModel's version is equal to the given one.
   * @param version the given version to compare the actual PlaceSearchRequestModel's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlaceSearchRequestModel's version is not equal to the given one.
   */
  public PlaceSearchRequestModelAssert hasVersion(String version) {
    // check that actual PlaceSearchRequestModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualVersion = actual.getVersion();
    if (!org.assertj.core.util.Objects.areEqual(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
