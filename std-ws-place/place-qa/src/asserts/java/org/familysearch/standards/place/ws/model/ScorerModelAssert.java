package org.familysearch.standards.place.ws.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link ScorerModel} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ScorerModelAssert extends AbstractAssert<ScorerModelAssert, ScorerModel> {

  /**
   * Creates a new </code>{@link ScorerModelAssert}</code> to make assertions on actual ScorerModel.
   * @param actual the ScorerModel we want to make assertions on.
   */
  public ScorerModelAssert(ScorerModel actual) {
    super(actual, ScorerModelAssert.class);
  }

  /**
   * An entry point for ScorerModelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myScorerModel)</code> and get specific assertion with code completion.
   * @param actual the ScorerModel we want to make assertions on.
   * @return a new </code>{@link ScorerModelAssert}</code>
   */
  public static ScorerModelAssert assertThat(ScorerModel actual) {
    return new ScorerModelAssert(actual);
  }

  /**
   * Verifies that the actual ScorerModel's name is equal to the given one.
   * @param name the given name to compare the actual ScorerModel's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ScorerModel's name is not equal to the given one.
   */
  public ScorerModelAssert hasName(String name) {
    // check that actual ScorerModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ScorerModel's reason is equal to the given one.
   * @param reason the given reason to compare the actual ScorerModel's reason to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ScorerModel's reason is not equal to the given one.
   */
  public ScorerModelAssert hasReason(String reason) {
    // check that actual ScorerModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected reason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReason = actual.getReason();
    if (!org.assertj.core.util.Objects.areEqual(actualReason, reason)) {
      failWithMessage(assertjErrorMessage, actual, reason, actualReason);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ScorerModel's score is equal to the given one.
   * @param score the given score to compare the actual ScorerModel's score to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ScorerModel's score is not equal to the given one.
   */
  public ScorerModelAssert hasScore(Integer score) {
    // check that actual ScorerModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected score of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualScore = actual.getScore();
    if (!org.assertj.core.util.Objects.areEqual(actualScore, score)) {
      failWithMessage(assertjErrorMessage, actual, score, actualScore);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ScorerModel's time is equal to the given one.
   * @param time the given time to compare the actual ScorerModel's time to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ScorerModel's time is not equal to the given one.
   */
  public ScorerModelAssert hasTime(Long time) {
    // check that actual ScorerModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected time of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualTime = actual.getTime();
    if (!org.assertj.core.util.Objects.areEqual(actualTime, time)) {
      failWithMessage(assertjErrorMessage, actual, time, actualTime);
    }

    // return the current assertion for method chaining
    return this;
  }

}
